#!/usr/bin/ruby
#!/Users/ron/.rvm/rubies/ruby-2.3.0/bin/ruby
require 'tempfile'
require 'fileutils'

SPLIT_MARKER = "----\n\n"
TOC_MARKER = "<!--TOC-->\n"
SCRIPT_FILE = "../splitter"
TAB = '    '
Titles = {}

def add_toc(chunk)
  halves = chunk.split(TOC_MARKER)
  puts "halves length %d" % halves.length
  return chunk if halves.length != 2
  return halves[0] + table_of_contents + halves[1]
end

def make_file_name(filenumber)
  return "index.md" if filenumber == 0
  return sprintf("%02d.md", filenumber)
end

def make_link_line(filenumber, max_length)
  link = ""
  link += "[%s](%02d.html) | " % [trim_left(Titles[filenumber - 1]), filenumber - 1] unless filenumber <= 1 # mod
  link += "[%s](index.html) | " % [trim_left(Titles[filenumber - 1]) ] if filenumber == 1 # added
  link += "[Top](index.html) | "
  link += "[%s](%02d.html)" % [trim_left(Titles[filenumber + 1]), filenumber + 1] unless filenumber >= max_length
  return link
end

def record_titles(chunks)
  filenumber = 0
  chunks.each do | chunk |
    title = chunk.split("\n")[0].strip # remove any spaces
    Titles[filenumber] = trim_right(title) # remove trailing stuff
    filenumber += 1
  end
end

def trim_full(string)
  trim_left(trim_right(string))
end

def trim_right(string)
  string.gsub(/ *#*$/, '')
end

def trim_left(string)
  string.gsub(/^#* */, '')
end

def table_of_contents
  toc = ""
  Titles.each_pair do | number, title |
    # looks like: ### title
    pounds, *rest = title.split(' ')
    the_title = rest.join(' ')
    tabs = pounds.gsub(/#/, '    ')
    tabs = tabs[4..-1] # remove one set
    toc += "%s* [%s](%s)\n" % [tabs, the_title, make_file_name(number)] 
  end
  return toc
end

def update_table_of_contents(chunks)
  toc_chunk = chunks.delete_at(0)
  updated_toc = add_toc(toc_chunk)
  chunks.insert(0, updated_toc)
end

def write_file(chunk, reference_chunk, filenumber, max_length)
  filename = make_file_name(filenumber)
  title = Titles[filenumber]
  puts filename + ": " + title
  tf = File.new(filename, "w")
  tf.puts make_link_line(filenumber, max_length)
  tf.puts
  tf.print chunk
  tf.puts
  tf.puts
  tf.puts make_link_line(filenumber, max_length)
  tf.puts
  tf.puts
  tf.print reference_chunk
  tf.puts
  tf.puts
  tf.close
end

def write_files(chunks, reference_chunk)
  filenumber = 0
  chunks.each do |chunk|
    write_file(chunk, reference_chunk, filenumber, chunks.length - 1) unless chunk.length < 1
    filenumber += 1
  end
end

ARGF.set_encoding(Encoding::UTF_8) 
input = ARGF.read
chunks = input.split(SPLIT_MARKER)
reference_chunk = chunks.delete_at(-1)
record_titles(chunks)
update_table_of_contents(chunks)
write_files(chunks, reference_chunk)
FileUtils.cp(SCRIPT_FILE, ".")

#!/usr/bin/ruby
#!/Users/ron/.rvm/rubies/ruby-2.3.0/bin/ruby
require 'tempfile'
require 'fileutils'

SPLIT_MARKER = "----\n\n"
TOC_MARKER = "<!--TOC-->\n"
SCRIPT_FILE = "../splitter"
TAB = '    '
Titles = {}

def add_toc(chunk)
  halves = chunk.split(TOC_MARKER)
  puts "halves length %d" % halves.length
  return chunk if halves.length != 2
  return halves[0] + table_of_contents + halves[1]
end

def make_file_name(filenumber)
  return "index.md" if filenumber == 0
  return sprintf("%02d.md", filenumber)
end

def make_link_line(filenumber, max_length)
  link = ""
  link += "[%s](%02d.html) | " % [trim_left(Titles[filenumber - 1]), filenumber - 1] unless filenumber <= 1 # mod
  link += "[%s](index.html) | " % [trim_left(Titles[filenumber - 1]) ] if filenumber == 1 # added
  link += "[Top](index.html) | "
  link += "[%s](%02d.html)" % [trim_left(Titles[filenumber + 1]), filenumber + 1] unless filenumber >= max_length
  return link
end

def record_titles(chunks)
  filenumber = 0
  chunks.each do | chunk |
    title = chunk.split("\n")[0].strip # remove any spaces
    Titles[filenumber] = trim_right(title) # remove trailing stuff
    filenumber += 1
  end
end

def trim_full(string)
  trim_left(trim_right(string))
end

def trim_right(string)
  string.gsub(/ *#*$/, '')
end

def trim_left(string)
  string.gsub(/^#* */, '')
end

def table_of_contents
  toc = ""
  Titles.each_pair do | number, title |
    # looks like: ### title
    pounds, *rest = title.split(' ')
    the_title = rest.join(' ')
    tabs = pounds.gsub(/#/, '    ')
    tabs = tabs[4..-1] # remove one set
    toc += "%s* [%s](%s)\n" % [tabs, the_title, make_file_name(number)] 
  end
  return toc
end

def update_table_of_contents(chunks)
  toc_chunk = chunks.delete_at(0)
  updated_toc = add_toc(toc_chunk)
  chunks.insert(0, updated_toc)
end

def write_file(chunk, reference_chunk, filenumber, max_length)
  filename = make_file_name(filenumber)
  title = Titles[filenumber]
  puts filename + ": " + title
  tf = File.new(filename, "w")
  tf.puts make_link_line(filenumber, max_length)
  tf.puts
  tf.print chunk
  tf.puts
  tf.puts
  tf.puts make_link_line(filenumber, max_length)
  tf.puts
  tf.puts
  tf.print reference_chunk
  tf.puts
  tf.puts
  tf.close
end

def write_files(chunks, reference_chunk)
  filenumber = 0
  chunks.each do |chunk|
    write_file(chunk, reference_chunk, filenumber, chunks.length - 1) unless chunk.length < 1
    filenumber += 1
  end
end

ARGF.set_encoding(Encoding::UTF_8) 
input = ARGF.read
chunks = input.split(SPLIT_MARKER)
reference_chunk = chunks.delete_at(-1)
record_titles(chunks)
update_table_of_contents(chunks)
write_files(chunks, reference_chunk)
FileUtils.cp(SCRIPT_FILE, ".")

